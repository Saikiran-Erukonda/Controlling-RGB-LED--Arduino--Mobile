// ws2811 and ws2812b conroller code using ESP8266 NOD mcu
//install latest Arduino IDE and Copy this code 
// Install libraries ESP8266WiFi and FastLED in Arduino IDE
// and paste it there apply some changes
// Created by : E saikiran
// date : March 2023
// Please Install Andoid app to control your strip


#include <ESP8266WiFi.h>
#include <FastLED.h>

#define LED_PIN 2
#define NUM_LEDS 50
int color = 0;
int f = 0, l = 49;
int r_c, g_c, b_c;
int r = 0, g = 0, b = 0, r1 = 0, g1 = 0, b1 = 0, rd, gd, bd;
int del_time = 5;
String rr_string = "", gg_string = "", bb_string = "";
int fcn = 0;
int wificlose = 0;

CRGB leds[NUM_LEDS];


String locip;
//String ssid, pwd ;
const char* ssid = "11";       //Change according to your Wifi name 
const char* pass = "12121212"; //Change according to wifi password


WiFiServer server(80);

void setup() {
  Serial.begin(9600); delay(500);
  Serial.print("---");
  Serial.print(ssid); Serial.println("---");



  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }

  Serial.println("connected");

  server.begin();
  Serial.println("Server started");
  locip = WiFi.localIP().toString();
  Serial.println(WiFi.localIP());
delay(3000);



}

void loop() {


  Serial.print("color = ");
  Serial.println(color);
  Serial.print("fcn = ");
  Serial.println(fcn);

  switch (fcn) {
    case 1 : {
        strip(del_time);
        break;
      }

    case 2 : {
        doubleled(del_time);
        break;
      }

    case 3 : {
        doubleledtwocolor(del_time);
        break;
      }

    case 4 : {
        striprandom(del_time);

        break;
      }

    case 5 : {
        strip( del_time);
        stripc(del_time);
        break;
      }

    case 6 : {
        stripr(del_time);
        stripcr(del_time);
        break;
      }

    case 7 : {
        twoblink(del_time);
        break;
      }

    case 8 : {
        collectled(del_time);
        break;
      }

    case 9 : {
        runningf(del_time);
        break;
      }

    case 10 : {
        rainbow(del_time);
        break;
      }


    default : {
        break;
      }
  }

  //Serial.println(WiFi.localIP());
  delay(10);
  WiFiClient client = server.available();
  while (! client) {
    return;
  }
  String req = client.readStringUntil('\r');
  Serial.println(req);
  client.flush();




  //------------------------
  if ((req.indexOf("/rgb/") != -1)) {

    String colorcode = req;

    short indexof_rd = colorcode.indexOf("/rd");
    short indexof_gd = colorcode.indexOf("/gd");
    short indexof_bd = colorcode.indexOf("/bd");

    rd = colorcode[indexof_rd + 3];
    gd = colorcode[indexof_gd + 3];
    bd = colorcode[indexof_bd + 3];



    Serial.println("DIGIT" + String(rd) + "," + String(gd) + "," + String(bd));

    short indexof_r = colorcode.indexOf("/rr");
    short indexof_g = colorcode.indexOf("/gg");
    short indexof_b = colorcode.indexOf("/bb");


    char rr1 = colorcode[indexof_r + 3];
    char rr2 = colorcode[indexof_r + 4];
    char rr3 = colorcode[indexof_r + 5];
    char gg1 = colorcode[indexof_g + 3];
    char gg2 = colorcode[indexof_g + 4];
    char gg3 = colorcode[indexof_g + 5];
    char bb1 = colorcode[indexof_b + 3];
    char bb2 = colorcode[indexof_b + 4];
    char bb3 = colorcode[indexof_b + 5];

    if (rd == 49) {
      rr_string = String(rr1);
    }
    else if (rd == 50) {
      rr_string = String(rr1) + String(rr2);
    }
    else if (rd == 51) {
      rr_string = String(rr1) + String(rr2) + String(rr3);
    }



    if (gd == 49) {
      gg_string = String(gg1);
    }
    else if (gd == 50) {
      gg_string = String(gg1) + String(gg2);
    }
    else if (gd == 51) {
      gg_string = String(gg1) + String(gg2) + String(gg3);
    }




    if (bd == 49) {
      bb_string = String(bb1);
    }
    else if (bd == 50) {
      bb_string = String(bb1) + String(bb2);
    }
    else if (bd == 51) {
      bb_string = String(bb1) + String(bb2) + String(bb3);
    }



    r_c = rr_string.toInt();
    g_c = gg_string.toInt();
    b_c = bb_string.toInt();

    if (color == 0) {
      r = r_c;
      g = g_c;
      b = b_c;
    }

    if (color == 1) {
      r1 = r_c;
      g1 = g_c;
      b1 = b_c;
    }

    Serial.println("RGB = " + rr_string + "," + gg_string + "," + bb_string);


  }


  if ((req.indexOf("/mode/ws2811") != -1)) {
    ws2811();
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("2811 mode");
    delay(10);
    client.flush();
  }

  if ((req.indexOf("/color/0") != -1)) {
    color = 0;

    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("second color");
    delay(10);
    client.flush();
  }

  if ((req.indexOf("/color/1") != -1)) {

    color = 1;

    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("first color");
    delay(10);
    client.flush();

  }



  if ((req.indexOf("/mode/ws2812b") != -1)) {
    ws2812b();
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("2812b mode");
    delay(10);
    client.flush();
  }

  if ((req.indexOf("/reset") != -1)) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("reset");
    delay(10);
    client.flush();
    stripc(10);
    ESP.reset();
  }

  if ((req.indexOf("/connection") != -1)) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("connection ok");
    delay(10);
    client.flush();
  }


  if ((req.indexOf("/delay") != -1)) {
    String delaytimestring = req;

    delaytimestring.remove(0, (delaytimestring.indexOf("y/")) + 2);

    delaytimestring.remove(delaytimestring.indexOf("HTTP"), (delaytimestring.length()) - (delaytimestring.indexOf("HTTP")));
    Serial.println(delaytimestring);
    del_time = delaytimestring.toInt();


    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("delay time sent");
    delay(10);
    client.flush();
  }



   if ((req.indexOf("/fcn") != -1)) {
    String fcnstring = req;

    fcnstring.remove(0, (fcnstring.indexOf("n/")) + 2);

    fcnstring.remove(fcnstring.indexOf("HTTP"), (fcnstring.length()) - (fcnstring.indexOf("HTTP")));
    Serial.println(fcnstring);
    fcn = fcnstring.toInt();


    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("");
    client.println("fcn "+fcnstring+ "selected");
    delay(10);
    client.flush();
  }








}

//----------------------------------------
//---------F-U-N-C-T-I-O-N-S--------------
//   :::::::  ++++ ***** ++++ :::::::
//----------------------------------------


void one(int r, int g, int b, int t) {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();
    delay(t);

    leds[i] = CRGB(0, 0, 0);
    FastLED.show();
    delay(t);

  }
}


void oner(int r, int g, int b, int t) {
  for (int i = NUM_LEDS; i > 0; i--) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();
    delay(t);

    leds[i] = CRGB(0, 0, 0);
    FastLED.show();
    delay(t);

  }
}



void strip(int t) {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();
    delay(t);
  }
}



void stripc(int t) {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB(0, 0, 0);
    FastLED.show();
    delay(t);


  }
}

void stripcr(int t) {
  for (int i = 49; i >= 0; i--) {
    leds[i] = CRGB(0, 0, 0);
    FastLED.show();
    delay(t);


  }
}

void stripr(int t) {
  for (int i = 49; i > 0; i--) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();
    delay(t);
  }
}

void twoblink(int t) {
  for (int i = 0; i < 50; i += 2) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();


  }

  for (int i = 1; i < 50; i += 2) {
    leds[i] = CRGB(r1, g1, b1);
    FastLED.show();

  }

  delay(t);

  for (int i = 0; i < 50; i += 2) {
    leds[i] = CRGB(r1, g1, b1);
    FastLED.show();

  }

  for (int i = 1; i < 50; i += 2) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();

  }
  delay(t);

}


void striprandom( int t) {
  for (int i = 0; i < 50; i++) {
    r = random(0, 255);
    g = random(0, 255);
    b = random(0, 255);
    leds[i] = CRGB(r, g, b);

    delay(t);
  }
  FastLED.show();
}

void bothside(int f, int l, int r, int g, int b, int t) {
  leds[f] = CRGB(r, g, b);
  leds[l] = CRGB(r, g, b);
  FastLED.show();
  delay(t);
}

void bothsidetwocolor(int f, int l, int r, int g, int b, int r1, int g1, int b1, int t) {
  leds[f] = CRGB(r, g, b);
  leds[l] = CRGB(r1, g1, b1);
  FastLED.show();
  delay(t);
}

void closebothside(int f, int l, int t) {
  leds[f] = CRGB(0, 0, 0);
  leds[l] = CRGB(0, 0, 0);
  FastLED.show();
  delay(t);
}


void ws2812b() {
  FastLED.addLeds<WS2812B, LED_PIN, GRB>(leds, NUM_LEDS);
  Serial.println("MODE 2812B");
}

void ws2811() {
  FastLED.addLeds<WS2811, LED_PIN, RGB>(leds, NUM_LEDS);
  Serial.println("MODE 2811");
}

void doubleled(int tt) {
  for (int fj = 0; fj < 50; fj++) {
    l = 49 - fj;
    bothside(fj, l, r,  g, b, tt);
    closebothside(fj, l, 2);
    if (l == 0) {
      l = 49;
    }
  }
}





void doubleledtwocolor(int tt) {
  for (int fi = 0; fi < 50; fi++) {
    l = 49 - fi;
    bothsidetwocolor(fi, l, r,  g, b, r1, g1, b1, tt);
    closebothside(fi, l, 2);
    if (l == 0) {
      l = 49;
    }
  }

}
int x = NUM_LEDS - 1;
void collectled(int t) {
  for (int i = 0; i <= x; i++) {
    leds[i] = CRGB(r, g, b);
    FastLED.show();
    delay(t);
    leds[i] = CRGB(0, 0, 0);
    FastLED.show();
    delay(t);
  }
  leds[x] = CRGB(r, g, b);
  FastLED.show();
  x--;
  if (x == 0) {
    stripcr(t + 10);
    x = 49;
  }
}


void runningf(int t) {
  for (int i = 0; i < 50; i += 3) {
    leds[i] = CRGB(r, g, b);

    delay(t);
  }
  FastLED.show();

  for (int i = 0; i < 50; i += 3) {
    leds[i] = CRGB(0, 0, 0);

    delay(t);

  }

  for (int i = 1; i < 50; i += 3) {
    leds[i] = CRGB(r, g, b);

    delay(t);
  } FastLED.show();

  for (int i = 1; i < 50; i += 3) {
    leds[i] = CRGB(0, 0, 0);

    delay(t);
  }

  for (int i = 2; i < 50; i += 3) {
    leds[i] = CRGB(r, g, b);

    delay(t);
  } FastLED.show();

  for (int i = 2; i < 50; i += 3) {
    leds[i] = CRGB(0, 0, 0);

    delay(t);
  }
}






void rainbowseg(int r, int g, int b, int point, int t, int startingpoint) {
  for (int i = 0; i < 50; i += point) {
    leds[i + startingpoint] = CRGB(r, g, b);
    delay(t);

  } FastLED.show();

}



void rainbow(int t) {
  rainbowseg(148, 0, 211, 7, t, 0);

  rainbowseg(75, 0, 130, 7, t, 1);

  rainbowseg(0, 0, 255, 7, t, 2);

  rainbowseg(0, 255, 0, 7, t, 3);

  rainbowseg(255, 255, 0, 7, t, 4);

  rainbowseg(255, 127, 0, 7, t, 5);

  rainbowseg(255, 0, 0, 7, t, 6);

}


void fire(int t){
  rainbowseg(148,0,211,7,t,0);
  rainbowseg(0,0,0,7,t,0);
  rainbowseg(75,0,130,7,t,1);
  rainbowseg(0,0,0,7,t,1);
  rainbowseg(0,0,255,7,t,2);
  rainbowseg(0,0,0,7,t,2);
  rainbowseg(0,255,0,7,t,3);
  rainbowseg(0,0,0,7,t,3);
  rainbowseg(255,255,0,7,t,4);
  rainbowseg(0,0,0,7,t,4);
  rainbowseg(255,127,0,7,t,5);
  rainbowseg(0,0,0,7,t,5);
  rainbowseg(255,0,0,7,t,6);
  rainbowseg(0,0,0,7,t,6);

  }

// Thank u
// Created by E Saikiran